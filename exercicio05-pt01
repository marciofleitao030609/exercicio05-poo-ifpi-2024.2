class Conta {
    id: number;
    numero: string;
    saldo: number;
    cliente: Cliente | null;

    constructor(id: number, numero: string, saldo: number) {
        this.id = id;
        this.numero = numero;
        this.saldo = saldo;
        this.cliente = null;
    }

    sacar(valor: number): void {
        if (valor > this.saldo) {
            console.log("Saldo insuficiente!");
            return;
        }
        this.saldo -= valor;
    }

    depositar(valor: number): void {
        this.saldo += valor;
    }

    consultarSaldo(): number {
        return this.saldo;
    }

    transferir(contaDestino: Conta, valor: number): void {
        if (valor > this.saldo) {
            console.log("Saldo insuficiente para transferência!");
            return;
        }
        this.sacar(valor);
        contaDestino.depositar(valor);
    }
}

class Cliente {
    id: number;
    nome: string;
    cpf: string;
    dataNascimento: Date;
    contas: Conta[];

    constructor(id: number, nome: string, cpf: string, dataNascimento: Date) {
        this.id = id;
        this.nome = nome;
        this.cpf = cpf;
        this.dataNascimento = dataNascimento;
        this.contas = [];
    }

    adicionarConta(conta: Conta): void {
        if (this.contas.find(c => c.numero === conta.numero)) {
            console.log("Esta conta já está associada a este cliente!");
            return;
        }
        this.contas.push(conta);
        conta.cliente = this;
    }

    listarContas(): void {
        console.log(`Contas do(a) cliente ${this.nome}:`);
        for (let conta of this.contas) {
            console.log(`- Conta número: ${conta.numero}, Saldo: ${conta.saldo}`);
        }
    }

    totalizarSaldo(): number {
        return this.contas.reduce((total, conta) => total + conta.saldo, 0);
    }
}

class Banco {
    contas: Conta[];
    clientes: Cliente[];

    constructor() {
        this.contas = [];
        this.clientes = [];
    }

    inserirCliente(cliente: Cliente): void {
        if (this.clientes.find(c => c.id === cliente.id || c.cpf === cliente.cpf)) {
            console.log("Cliente com o mesmo ID ou CPF já existe!");
            return;
        }
        this.clientes.push(cliente);
    }

    consultarCliente(cpf: string): Cliente | null {
        return this.clientes.find(cliente => cliente.cpf === cpf) || null;
    }

    inserirConta(conta: Conta): void {
        if (this.contas.find(c => c.id === conta.id || c.numero === conta.numero)) {
            console.log("Conta com o mesmo ID ou número já existe!");
            return;
        }
        this.contas.push(conta);
    }

    consultarConta(numero: string): Conta | null {
        return this.contas.find(conta => conta.numero === numero) || null;
    }

    associarContaCliente(numeroConta: string, cpfCliente: string): void {
        const cliente = this.consultarCliente(cpfCliente);
        const conta = this.consultarConta(numeroConta);

        if (!cliente) {
            console.log("Cliente não encontrado!");
            return;
        }
        if (!conta) {
            console.log("Conta não encontrada!");
            return;
        }
        if (conta.cliente) {
            console.log("Esta conta já está associada a outro cliente!");
            return;
        }
        cliente.adicionarConta(conta);
    }

    listarContasCliente(cpf: string): Conta[] {
        const cliente = this.consultarCliente(cpf);
        if (!cliente) {
            console.log("Cliente não encontrado!");
            return [];
        }
        return cliente.contas;
    }

    totalizarSaldoCliente(cpf: string): any {
        const cliente = this.consultarCliente(cpf);
        if (!cliente) {
            console.log("Cliente não encontrado!");
            return 0;
        }
        console.log("Informações do(a) cliente:");
        console.log(`Nome: ${cliente.nome}`);
        console.log(`CPF: ${cliente.cpf}`);
        cliente.listarContas();
        console.log(`Saldo total: ${cliente.totalizarSaldo()}`);
    }
}

// EXEMPLOS DE USO
let banco = new Banco();

// CRIAR CLIENTE
let cliente1 = new Cliente(1, "Orleanny Santana", "666.666.321-00", new Date(1990, 10, 20));
let cliente2 = new Cliente(2, "Celeste Ferreira", "333.333.123-00", new Date(1985, 10, 15));
let cliente3 = new Cliente(3, "Tiago Biazin", "999.999.213-00", new Date(1999, 11, 30));
banco.inserirCliente(cliente1);
banco.inserirCliente(cliente2);
banco.inserirCliente(cliente3);

// CRIAR CONTA
let conta1 = new Conta(101, "111", 1500);
let conta2 = new Conta(102, "222", 900);
let conta3 = new Conta(103, "333", 3000);
banco.inserirConta(conta1);
banco.inserirConta(conta2);
banco.inserirConta(conta3);

// ASSOCIAR CONTA
banco.associarContaCliente("111", "666.666.321-00");
banco.associarContaCliente("222", "333.333.123-00");
banco.associarContaCliente("333", "999.999.213-00");

// CONSULTAR SALDO
banco.totalizarSaldoCliente(cliente1.cpf);

